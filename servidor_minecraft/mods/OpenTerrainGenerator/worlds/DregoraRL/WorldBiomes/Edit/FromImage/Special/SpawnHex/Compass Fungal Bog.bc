
#######################################################################
# +-----------------------------------------------------------------+ #
# |                        Biome Inheritance                        | #
# +-----------------------------------------------------------------+ #
#######################################################################

# This should be the value of the biomeConfig you wish to extend.
# The extended config will be loaded, at which point the configs included below
# will overwrite any configs loaded from the extended config.
BiomeExtends: 

# When set to true, all resources of the parent biome (if any) will be copied
# to the resources queue of this biome, except for saplings. If a resource in
# the parent biome looks very similar to that of a child biome (for example, 
# two ores of the same type it won't be copied.
ResourceInheritance: true


#######################################################################
# +-----------------------------------------------------------------+ #
# |                         Biome placement                         | #
# +-----------------------------------------------------------------+ #
#######################################################################

# Biome size from 0 to GenerationDepth. Defines in which biome layer this biome will be generated (see GenerationDepth).
# Higher numbers give a smaller biome, lower numbers a larger biome.
# How this setting is used depends on the value of BiomeMode in the WorldConfig.
# It will be used for:
# - normal biomes, ice biomes, isle biomes and border biomes when BiomeMode is set to BeforeGroups
# - biomes spawned as part of a BiomeGroup when BiomeMode is set to Normal.
#   For biomes spawned as isles, borders or rivers other settings are available.
#   Isle biomes:   BiomeSizeWhenIsle (see below)
#   Border biomes: BiomeSizeWhenBorder (see below)
#   River biomes:  RiverSize (see WorldConfig)
BiomeSize: 4

# Biome rarity from 100 to 1. If this is normal or ice biome - chance for spawn this biome then others.
# Example for normal biome :
#   100 rarity mean 1/6 chance than other ( with 6 default normal biomes).
#   50 rarity mean 1/11 chance than other
# For isle biomes see the BiomeRarityWhenIsle setting below.
# Doesn`t work on Ocean and River (frozen versions too) biomes when not added as normal biome.
BiomeRarity: 100

# The hexadecimal color value of this biome. Used in the output of the /otg map command,
# and used in the input of BiomeMode: FROMIMAGE.
BiomeColor: #0d0d04

# Replace this biome to specified after the terrain is generated.
# This will make the world files contain the id of the specified biome, instead of the id of this biome.
# This will cause saplings, colors and mob spawning work as in specified biome.To replace to minecraft biomes use resourcelocation notation, for instance: minecraft:plains.
ReplaceToBiomeName: Rotten Fungal Plains

####################
# Isle biomes only #
####################

# To spawn a biome as an isle, you need to add it first to the
# IsleBiomes list in the WorldConfig.

# List of biomes in which this biome will spawn as an isle.
# For example, Mushroom Isles spawn inside the Ocean biome.
IsleInBiome: 

# Size of this biome when spawned as an isle biome in BiomeMode: Normal.
# Valid values range from 0 to GenerationDepth.
# Larger numbers give *smaller* islands. The biome must be smaller than the biome it's going
# to spawn in, so the BiomeSizeWhenIsle number must be larger than the BiomeSize of the other biome.
BiomeSizeWhenIsle: 6

# Rarity of this biome when spawned as an isle biome in BiomeMode: Normal.
BiomeRarityWhenIsle: 97

######################
# Border biomes only #
######################

# To spawn a biome as a border, you need to add it first to the
# BorderBiomes list in the WorldConfig.

# List of biomes this biome can be a border of.
# For example, the Beach biome is a border on the Ocean biome, so
# it can spawn anywhere on the border of an ocean.
BiomeIsBorder: 

# List of biomes that cancel spawning of this biome.
# For example, the Beach biome will never spawn next to an Extreme Hills biome.
NotBorderNear: 

# Size of this biome when spawned as a border biome in BiomeMode: Normal.
# Valid values range from 0 to GenerationDepth.
# Larger numbers give *smaller* borders. The biome must be smaller than the biome it's going
# to spawn in, so the BiomeSizeWhenBorder number must be larger than the BiomeSize of the other biome.
BiomeSizeWhenBorder: 8


#######################################################################
# +-----------------------------------------------------------------+ #
# |                  Terrain height and volatility                  | #
# +-----------------------------------------------------------------+ #
#######################################################################

BiomeHeight: -2.1

BiomeVolatility: 0.0

SmoothRadius: 1

MaxAverageHeight: 1.0

MaxAverageDepth: 0.0

Volatility1: 0.0

Volatility2: 0.6

VolatilityWeight1: 3.5

VolatilityWeight2: 2.3

DisableBiomeHeight: false

CustomHeightControl: 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0

#######################################################################
# +-----------------------------------------------------------------+ #
# |                              Rivers                             | #
# +-----------------------------------------------------------------+ #
#######################################################################

# There are two different river systems - the standard one and the improved one.
# See the ImprovedRivers settting in the WorldConfig. Both modes have different
# river settings, so carefully read the headers to know which settings you can use.

########################
# ImprovedRivers:false #
########################

# Only available when ImprovedRivers is set to false in the WorldConfig.
# Sets which biome is used as the river biome.
RiverBiome: Ancient River

#######################
# ImprovedRivers:true #
#######################

# Only available when ImprovedRivers is set to true in the WorldConfig.

# Works the same as BiomeHeight (scroll up), but is used where a river is generated in this biome
RiverHeight: -1.0

# Works the same as BiomeVolatility (scroll up), but is used where a river is generated in this biome
RiverVolatility: 0.3

# Works the same as WaterLevelMax (scroll down), but is used where a river is generated in this biome
# Can be used to create elevated rivers
RiverWaterLevel: 63

# Works the same as CustomHeightControl (scroll up), but is used where a river is generated in this biome
RiverCustomHeightControl: 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0


#######################################################################
# +-----------------------------------------------------------------+ #
# |                              Blocks                             | #
# +-----------------------------------------------------------------+ #
#######################################################################

# Change this to generate something else than stone in the biome.
StoneBlock: STONE:0

# Surface block, usually GRASS.
SurfaceBlock: GRASS

# Block from stone to surface, like dirt in most biomes.
GroundBlock: DIRT

# Setting for biomes with more complex surface and ground blocks.
# Each column in the world has a noise value from what appears to be -7 to 7.
# Values near 0 are more common than values near -7 and 7. This setting is
# used to change the surface block based on the noise value for the column.
# Syntax: SurfaceBlockName,GroundBlockName,MaxNoise,[AnotherSurfaceBlockName,[AnotherGroundBlockName,MaxNoise[,...]]
# Example: SurfaceAndGroundControl: STONE,STONE,-0.8,GRAVEL,STONE,0.0,DIRT,DIRT,10.0
#   When the noise is below -0.8, stone is the surface and ground block, between -0.8 and 0
#   gravel with stone just below and between 0.0 and 10.0 there's only dirt.
#   Because 10.0 is higher than the noise can ever get, the normal SurfaceBlock
#   and GroundBlock will never appear in this biome.

# Alternatively, you can use Mesa, MesaForest or MesaBryce to get blocks
# like the blocks found in the Mesa biomes.
SurfaceAndGroundControl: STONE:0, STONE:0, -0.7, STONE:3, STONE:0, -0.35, OBSIDIAN, OBSIDIAN, -0.1, OBSIDIAN, OBSIDIAN, 0.1, STONE:3, STONE:0, 0.35, STONE:3, STONE:0, 0.7, STONE:0, STONE:0, 1.5 

# Replace Variable: (blockFrom,blockTo[:blockDataTo][,minHeight,maxHeight])
# Example :
#   ReplacedBlocks: (GRASS,DIRT,100,127),(GRAVEL,GLASS)
# Replace grass block to dirt from 100 to 127 height and replace gravel to glass on all height 
ReplacedBlocks: (SANDSTONE,GRASS,50,65),(GRAVEL,SAND,39,39),(STONE:1,SAND,39,39),(STONE:0,SAND,39,39),(SANDSTONE:0,STONE:0,150,180),(STONE:0,SANDSTONE:0,180,256),(SAND:0,SANDSTONE:0,100,150),(OBSIDIAN,MAGMA,38,39),(GRASS,DIRT:2,154,156)

################################
# Water / Lava & Frozen States #
################################

# Set this to false to use the "Water / Lava & Frozen States" settings of this biome.
UseWorldWaterLevel: false

# Set water level. Every empty between this levels will be fill water or another block from WaterBlock.
WaterLevelMax: 63

WaterLevelMin: 40

# Block used as water in WaterLevelMax
WaterBlock: STATIONARY_WATER

# Block used as ice. Ice only spawns if the BiomeTemperture is low enough.
IceBlock: ICE

# Block used as cooled or frozen lava.
# Set this to OBSIDIAN for "frozen" lava lakes in cold biomes
CooledLavaBlock: OBSIDIAN


#######################################################################
# +-----------------------------------------------------------------+ #
# |                       Visuals and weather                       | #
# +-----------------------------------------------------------------+ #
#######################################################################

# Most of the settings here only have an effect on players with the client version of Open Terrain Generator installed.
# Biome temperature. Float value from 0.0 to 2.0.
# When this value is around 0.2, snow will fall on mountain peaks above y=90.
# When this value is around 0.1, the whole biome will be covered in snow and ice.
# However, on default biomes, this won't do anything except changing the grass and leaves colors slightly.
BiomeTemperature: 0.8

# Biome wetness. Float value from 0.0 to 1.0.
# If this biome is a custom biome, and this value is set to 0, no rain will fall.
# On default biomes, this won't do anything except changing the grass and leaves colors slightly.
BiomeWetness: 0.9

# Biome sky color.
SkyColor: #6aad6a

# Biome water color multiplier.
WaterColor: #3b3115

# Biome grass color.
GrassColor: #122611

# Biome grass color 2, used to create a gradient like vanilla swamps,only works when GrassColorIsMultiplier is set to false.Forge only atm.
GrassColor2: #FFFFFF

# Whether the grass color is a multiplier.
# If you set it to true, the color will be based on this value, the BiomeTemperature and the BiomeWetness.
# If you set it to false, the grass color will be just this color.
GrassColorIsMultiplier: false

# Biome foliage color.
FoliageColor: #1c180d 

# Biome foliage color 2, used to create a gradient like vanilla swamp grass,only works when FoliageColorIsMultiplier is set to false.Forge only atm.
FoliageColor2: #FFFFFF

# Whether the foliage color is a multiplier. See GrassColorIsMultiplier for details.
FoliageColorIsMultiplier: false

FogColor: #000000

#OLD FogColor: #b4a5da

FogDensity: 0.0
#OLD FogDensity: 0.1

FogTimeWeight: 0.1

FogRainWeight: 0.25

FogThunderWeight: 0.5

#######################################################################
# +-----------------------------------------------------------------+ #
# |                    PamHarvestCraft Resources                    | #
# +-----------------------------------------------------------------+ #
#######################################################################


#######################################################################
# +-----------------------------------------------------------------+ #
# |                      DynamicTree Resources                      | #
# +-----------------------------------------------------------------+ #
#######################################################################

#dynamictreesinputhere

#######################################################################
# +-----------------------------------------------------------------+ #
# |                     BiomesOplenty Resources                     | #
# +-----------------------------------------------------------------+ #
#######################################################################

#Fromimage BOP Gems


#RegistryInputHereGrass 

Grass(biomesoplenty:flower_0:0,NotGrouped,50,100.0,DIRT,GRASS,MYCELIUM)

#######################################################################
# +-----------------------------------------------------------------+ #
# |                         Rustic Resources                        | #
# +-----------------------------------------------------------------+ #
#######################################################################

#QuarkResourceUniqueLine
Grass(quark:leaf_carpet:7,NotGrouped,100,100.0,GRASS,DIRT,STONE)
Plant(quark:glowshroom,1,50.0,0,30,STONE)

#RusticResourceUniqueLine
Plant(rustic:mooncap_mushroom:3,1,5.0,0,30,GRASS,BIOMESOPLENTY:GRASS,STONE)
Plant(rustic:core_root:3,1,25.0,0,30,STONE)

#######################################################################
# +-----------------------------------------------------------------+ #
# |                          Resource queue                         | #
# +-----------------------------------------------------------------+ #
#######################################################################

#RecurrentComplex
CustomStructure(P_TreeDungeon,0.0)

#RuinsConversionQueue
#Structure Canyon generic:


#SpecialStructureQueue
#CustomStructure(cyclops_main,0.0,GorgonTemple,0.0)

#GlobalStructureQueue
CustomObject(Artifact_Mimic,Concrete_Mimic)
CustomStructure(Herbalist,0.0)
CustomStructure(v_bunker_hub_ent,0.0)
CustomStructure(maintenance_shaft_bottom,0.0)

CustomStructure(DungeonSpawner02,0.0)
CustomStructure(CityGridOcean,0.0)


CustomStructure(ruin_small_random,0.0)
CustomStructure(DeepTunnel_EntranceLowSpecial,0.0)
CustomStructure(DeepTunnel_EntranceLow,0.0)

CustomStructure(Mineshaft,0.0,W-Mineshaft,0.0)

#FROMIMAGEStructureQueue
CustomStructure(CastleRuins,0.0)
CustomStructure(DaerocVillage,0.0)
CustomStructure(PirateBay,0.0)
CustomStructure(Harbor,0.0)

#MonsterQueue




Ore(STONE:5,33,10,100.0,0,79,STONE:0)
Ore(STONE:3,33,10,100.0,0,79,STONE:0)
Ore(STONE:1,33,10,100.0,0,79,STONE:0)

#Default Ore Resources
CustomObject(MagmaChasm,WaterChasm)
Dungeon(8,100.0,0,128)
Ore(DIRT,33,10,100.0,0,255,STONE)
Ore(GRAVEL,33,8,100.0,0,255,STONE)
Ore(STONE:1,33,10,100.0,0,79,STONE)
Ore(STONE:3,33,10,100.0,0,79,STONE)
Ore(STONE:5,33,10,100.0,0,79,STONE)
Ore(COAL_ORE,17,20,100.0,0,127,STONE)
Ore(IRON_ORE,9,20,100.0,0,63,STONE)
Ore(GOLD_ORE,9,2,100.0,0,31,STONE)
Ore(REDSTONE_ORE,8,8,100.0,0,15,STONE)
Ore(DIAMOND_ORE,8,1,100.0,0,15,STONE)
Ore(LAPIS_ORE,7,1,100.0,0,15,STONE)
UnderGroundLake(25,60,2,5.0,0,49)
Liquid(WATER,20,100.0,8,60,STONE)
Liquid(LAVA,10,100.0,8,60,STONE)

#ExtraOreResources

UnderWaterOre(SAND,7,3,100.0,DIRT:0,GRASS:0,STONE)
UnderWaterOre(GRAVEL,6,1,100.0,DIRT:0,GRASS:0,STONE)
UnderWaterOre(CLAY,4,1,100.0,DIRT:0,CLAY,STONE)
Ore(SAND,20,100,80,35,40,STONE,SANDSTONE)
Ore(GRAVEL,20,100,60,35,40,STONE,SANDSTONE)
Ore(CLAY,20,100,30,35,40,STONE,SANDSTONE)
Ore(SEA_LANTERN,5,5,30,39,39,STONE,SANDSTONE)
Ore(SAND,15,20,30,156,156,DIRT:1)
Ore(SEA_LANTERN,5,15,30,156,156,DIRT:2,SAND)

CustomStructure(SpawnHex,100.0)
CustomStructure(SubOcean_Hill_01,100.0,SubOcean_Hill_02,100.0,SubOcean_Hill_03,100.0)
#CustomStructure(CO-SkullMaster,3.0)
CustomObject(SmallDungeon)
CustomObject(CO-CeilingSpike-01,CO-CeilingSpike-02,CO-CeilingSpike-03,CO-CeilingSpike-04)
CustomObject(Ocean-stonecave_01,Ocean-stonecave_02,Ocean-stonecave_03,Ocean-stonecave_04)

CustomObject(CO-ColumnMixed,CO-ColumnObsidian,CO-ColumnDiorite,CO-ColumnLeaves,CO-ColumnStone)
CustomObject(CO-ColumnBig-01,CO-ColumnSmall-01,CO-ColumnSmall-02,CO-ColumnSmall-03,CO-ColumnSmall-04,CO-ColumnSmall-05)
CustomObject(CO-Vines)

#OceanLevel
Plant(Peony,10,40,0,30,GRASS)
Plant(Lilac,10,40,0,30,GRASS)
Plant(BlueOrchid,10,40,0,30,GRASS)
Plant(Allium,10,40,0,30,GRASS)
Plant(DoubleTallgrass,100,100,0,50,GRASS)
Plant(Tallgrass,100,100,0,50,GRASS)
Plant(BrownMushroom,20,25,0,50,DIRT:0,GRASS,STONE)
Plant(RedMushroom,10,15,0,50,DIRT:0,GRASS,STONE)
Plant(Fern,30,50,0,50,DIRT:0,GRASS)
Plant(LargeFern,5,30,0,50,DIRT:0,GRASS)
Plant(DeadBush,5,10,0,50,SAND,DIRT:0,GRASS)
Plant(OxeyeDaisy,15,20,0,50,GRASS)
AboveWaterRes(WATER_LILY,4,100.0)
Tree(20,Bog_Mangrove_01,100)


#DefaultFlowers
Plant(Dandelion,15,20,80,170,GRASS)
Plant(Poppy,15,20,80,170,GRASS)
Plant(OxeyeDaisy,15,20,80,170,GRASS)

#BelowTOPLayerGrass
Plant(DoubleTallgrass,100,100,90,150,GRASS)
Plant(Tallgrass,100,100,90,150,GRASS)
Plant(BrownMushroom,20,25,0,150,DIRT:0,GRASS,STONE)
Plant(RedMushroom,10,15,0,150,DIRT:0,GRASS,STONE)
Plant(Fern,30,50,90,150,DIRT:0,GRASS)
Plant(LargeFern,5,30,90,150,DIRT:0,GRASS)
Plant(DeadBush,5,10,90,150,SAND,DIRT:0,GRASS)


#AboveTOPLayerGrass
Plant(Tallgrass,100,100,161,170,GRASS)
Plant(BrownMushroom,1,25,161,170,DIRT:0,GRASS,STONE)
Plant(RedMushroom,10,15,161,170,DIRT:0,GRASS,STONE)
Plant(Fern,30,50,161,170,DIRT:0,GRASS)
Plant(LargeFern,5,30,161,170,DIRT:0,GRASS)
Plant(DeadBush,5,10,161,250,SAND,DIRT:0,GRASS)
Plant(DoubleTallgrass,100,100,161,256,GRASS)
Plant(Tallgrass,100,100,161,256,GRASS)

#######################################################################
# +-----------------------------------------------------------------+ #
# |                         Sapling resource                        | #
# +-----------------------------------------------------------------+ #
#######################################################################

# OpenTerrainGenerator allows you to grow your custom objects from saplings, instead
# of the vanilla trees. Add one or more Sapling functions here to override vanilla
# spawning for that sapling.

# The syntax is: Sapling(SaplingType,TreeType,TreeType_Chance[,Additional_TreeType,Additional_TreeType_Chance.....])
# Works like Tree resource instead first parameter.

# Sapling types: All, Oak, Redwood, Birch, SmallJungle, BigJungle, RedMushroom, BrownMushroom, Acacia, DarkOak, HugeRedwood
# All - will make the tree spawn from all saplings, but not from mushrooms.
# BigJungle - for when 4 jungle saplings grow at once.
# RedMushroom/BrownMushroom - will only grow when bonemeal is used.



# For virtual (replaceToBiomeName) biomes: Inherit all Sapling() resources from the
# replaceToBiomeName biome. If a Sapling() with the same SaplingType is defined 
# in this config and the parent config, the one from this config is used.
InheritSaplingResource: false


#######################################################################
# +-----------------------------------------------------------------+ #
# |                          Custom objects                         | #
# +-----------------------------------------------------------------+ #
#######################################################################

# These objects will spawn when using the UseBiome keyword.
BiomeObjects: 


#######################################################################
# +-----------------------------------------------------------------+ #
# |                            Structures                           | #
# +-----------------------------------------------------------------+ #
#######################################################################

StrongholdsEnabled: false
#10.000 Block Marker

WoodLandMansionsEnabled: false

OceanMonumentsEnabled: false

NetherFortressesEnabled: false

VillageType: Disabled

MineshaftType: Disabled

MineshaftRarity: 1.0

RareBuildingType: Disabled


#######################################################################
# +-----------------------------------------------------------------+ #
# |                           Mob spawning                          | #
# +-----------------------------------------------------------------+ #
#######################################################################

# This is where you configure mob spawning. Mobs spawn in groups,
# see http://minecraft.gamepedia.com/Spawn#Mob_spawning

# A mobgroups is made of four parts. They are mob, weight, min and max.
# The mob is one of the Minecraft internal mob names.
# See http://minecraft.gamepedia.com/Chunk_format#Mobs
# The weight is used for a random selection. This is a positive integer.
# The min is the minimum amount of mobs spawning as a group. This is a positive integer.
# The max is the maximum amount of mobs spawning as a group. This is a positive integer.

# Mob groups are written to the config files in Json.
# Json is a tree document format: http://en.wikipedia.org/wiki/JSON
# Write a mobgroup like this: {"mob": "mobname", "weight": integer, "min": integer, "max": integer}
# For example: {"mob": "Ocelot", "weight": 10, "min": 2, "max": 6}
# For example: {"mob": "MushroomCow", "weight": 5, "min": 2, "max": 2}
# A json list of mobgroups looks like this: [mobgroup, mobgroup, mobgroup...]
# This would be an ampty list: []
# You can validate your json here: http://jsonlint.com/

# There are four categories of mobs: monsters, creatures, water creatures and ambient creatures.
# In custom biomes, you can add your own mobgroups in the lists below. In the vanilla biomes,
# your changes are ignored.

# The monsters (skeletons, zombies, etc.) that spawn in this biome
# For instance [{"mob": "Spider", "weight": 100, "min": 4, "max": 4}, {"mob": "Zombie", "weight": 100, "min": 4, "max": 4}]
# Use the "/otg entities" console command to get a list of possible mobs and mob types.
# Use the "/otg biome -m" console command to get the list of registered mobs for a biome.
#SpawnMonsters: [{"mob": "minecraft:silverfish", "weight":100, "min":0, "max":8},{"mob": "minecraft:creeper", "weight":10, "min":0, "max":1},{"mob": "minecraft:spider", "weight":100, "min":0, "max":4},{"mob": "minecraft:zombie", "weight":95, "min":0, "max":4},{"mob": "minecraft:zombie_villager", "weight":5, "min":0, "max":1},{"mob": "minecraft:skeleton", "weight":100, "min":0, "max":4},{"mob": "minecraft:creeper", "weight":100, "min":0, "max":6},{"mob": "minecraft:slime", "weight":100, "min":0, "max":4},{"mob": "minecraft:enderman", "weight":10, "min":0, "max":4},{"mob": "minecraft:witch", "weight":15, "min":0, "max":3},{"mob": "minecraft:slime", "weight":1, "min":0, "max":1}]
#SpawnCreatures: [{"mob": "minecraft:zombie_horse", "weight":1, "min":0, "max":1},{"mob": "minecraft:sheep", "weight":3, "min":0, "max":4},{"mob": "minecraft:pig", "weight":5, "min":0, "max":4},{"mob": "minecraft:chicken", "weight":2, "min":0, "max":4},{"mob": "minecraft:cow", "weight":1, "min":0, "max":4}]
#SpawnWaterCreatures: [{"mob": "minecraft:guardian", "weight":5, "min":0, "max":1},{"mob": "minecraft:squid", "weight":10, "min":0, "max":4}]
#SpawnAmbientCreatures: [{"mob": "minecraft:bat", "weight":10, "min":8, "max":8}]

SpawnMonsters: []
SpawnCreatures: []
SpawnWaterCreatures: []
SpawnAmbientCreatures: []


# Forge Biome Dictionary ID used by other mods to identify a biome and place
# modded blocks, items and mobs in it.
# This will only work for modded items/blocks/mobs that are placed in biomes
# while chunks are being generated. Most mods that add mods add their mobs to
# biomes' internal mob list when MC starts and let MC's mob spawning mechanics
# handle the actual spawning. This means that when TC creates new biomes
# when it generates a world other mods do not add their mobs to those biomes.
# This can be solved by using the InheritMobsBiomeName setting to inherit a
# a mob list from a vanilla biome.
# NOTE: Only works for biomes with id's under < 255 (non-virtual biomes).
# For virtual biomes the BiomeDictId is inherited via ReplaceToBiomeName.
BiomeDictId: , CANYON, MAGICAL, MUSHROOM 

# Inherit the internal mobs list of another biome. Inherited mobs can be 
# overridden using the SpawnMonsters, SpawnCreatures, SpawnWaterCreatures
# and SpawnAmbientCreatures settings. Any mob type defined using those settings
# will override inherited mob settings for the same mob.
# Use this setting to inherit modded mobs from vanilla biomes (see also: BiomeDictId)
InheritMobsBiomeName: minecraft:swampland 

